#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import tarfile
from pathlib import Path
from importlib import import_module
from types import FunctionType
from logging import getLogger

sys.path.insert(0, str(Path(__file__).parent.parent/'lib'))
from viewers import get_config, get_col, GLOBAL_CONF, args_chk, show_opts
from pymeflib import update

logger = getLogger(GLOBAL_CONF.logname)


def get_filetype(fpath: Path):
    if not fpath.is_file():
        logger.debug('file does not exists')
        return None
    ext = fpath.suffix[1:].lower()
    if tarfile.is_tarfile(fpath):
        logger.debug('set file type: tar')
        return 'tar'
    else:
        for typ, exts in GLOBAL_CONF.types.items():
            if ext in exts.split():
                logger.debug(f'set file type: {typ}')
                return typ
    logger.debug('file type is not set.')
    return None


def load_lib(args):
    if args.type is None:
        logger.debug('file type is None')
        return None
    elif args.type == 'text':
        logger.debug('file type is text.')
        return None

    # python import style
    lib_path = f'viewers.{args.type}'
    # file path
    lib_path2 = Path(__file__).parent.parent/'lib/viewers'
    lib_path2 /= f'{args.type}.py'
    if not lib_path2.is_file():
        logger.error(f'Library file {lib_path2} is not found.')
        return None
    try:
        lib = import_module(lib_path)
    except ImportError as e:
        logger.error(f'Failed to load library (lib: {lib_path2}, error: {e})')
        return None
    return lib


def main(args):
    if args.file == 'update':
        root = Path(__file__).parent.parent
        msg_fg, msg_bg = get_col('msg_update')
        err_fg, err_bg = get_col('msg_error')
        def_branch = get_config('config', 'default_branch')
        update.run(str(root), msg_fg, msg_bg, err_fg, err_bg,
                   def_branch, logger=logger)
        return

    if args.file == 'config_list':
        show_opts()
        return

    if args.file == 'help':
        if not args_chk(args, 'type'):
            print('please set --type to see the details.')
            return
        lib = load_lib(args)
        if lib is None:
            print('Library file is not found.')
        else:
            if hasattr(lib, 'show_help') and type(lib.show_help) is FunctionType:
                lib.show_help()
            else:
                print("this type does not support showing help.")
        return

    fpath = Path(args.file).expanduser()
    if not fpath.exists():
        print("file doesn't exists!")
        return
    if fpath.is_dir():
        print("{} is a directory.".format(fpath))
        return

    if not args_chk(args, 'type'):
        args.type = get_filetype(fpath)

    if args.type == 'text':
        if ('LANG' in os.environ) and ('ja_JP' in os.environ['LANG']):
            print('vimでも使ってろ！')
        else:
            print("Why Don't you use vim???")
        return

    lib = load_lib(args)
    if lib is None:
        print('Library file is not found.')
    else:
        lib.main(fpath, args)
    return


if __name__ == "__main__":
    supported_type = list(GLOBAL_CONF.types.keys()).copy()
    supported_type.remove('text')
    parser = argparse.ArgumentParser(
            description="show the constitution of a file."
            + " default support file types ... {}".format(', '.join(supported_type)),
            epilog="To see the detailed help of each type,"
            + " type 'pyviewer help -t TYPE'. "
            + " PyViewer has other subcommands,"
            + " 'pyviewer update' updates this command,"
            + " and 'pyviewer config_list' shows"
            + " the current optional configuration."
            )
    parser.add_argument('file', help='input file')
    parser.add_argument('-t', '--type', dest='type',
                        help='specify the file type. "pyviewer help -t TYPE" will show the detailed help.',
                        choices=supported_type)
    tmpargs, rems = parser.parse_known_args()
    if not args_chk(tmpargs, 'type'):
        tmpargs.type = get_filetype(Path(tmpargs.file))
    lib = load_lib(tmpargs)
    if lib is not None:
        lib.add_args(parser)
    args = parser.parse_args()
    logger.debug(f'args: {args}')

    main(args)

# vim: filetype=python:
