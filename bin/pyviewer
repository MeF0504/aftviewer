#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import tarfile
from pathlib import Path
from importlib import import_module
from types import FunctionType

sys.path.append(str(Path(__file__).parent.parent))
from pyviewerlib import debug, json_opts, type_config, args_chk, debug_print,\
    show_opts
from pyviewerlib.core.update import update
from pyviewerlib.core import helpmsg


def get_filetype(fpath):
    ext = fpath.suffix[1:].lower()
    if tarfile.is_tarfile(fpath):
        return 'tar'
    else:
        for typ, exts in type_config.items():
            if ext in exts.split():
                return typ
    return None


def load_lib(args):
    # python import style
    lib_path = "pyviewerlib.{}".format(args.type)
    # file path
    lib_path2 = Path(__file__).parent.parent/"pyviewerlib"
    lib_path2 /= "{}.py".format(args.type)
    if not lib_path2.is_file():
        print('Library file {} is not found.'.format(lib_path2))
        return None
    try:
        lib = import_module(lib_path)
    except ImportError as e:
        print("Failed to load library")
        print('lib: {}'.format(lib_path2))
        print('error: {}'.format(e))
        return None
    return lib


def main(args):
    if args.file == 'update':
        update()
        return

    if args.file == 'config_list':
        show_opts()
        return

    if args.file == 'help':
        if not args_chk(args, 'type'):
            print('please set --type to see the details.')
            return
        lib = load_lib(args)
        if lib is not None:
            if hasattr(lib, 'show_help') and type(lib.show_help) is FunctionType:
                lib.show_help()
            else:
                print("this type does not support showing help.")
        return

    fpath = Path(args.file).expanduser()
    if not fpath.exists():
        print("file doesn't exists!")
        return
    if fpath.is_dir():
        print("{} is a directory.".format(fpath))
        return

    if not args_chk(args, 'type'):
        args.type = get_filetype(fpath)

    if args.type is None:
        print('This file type is not supported')
        return
    elif args.type == 'text':
        if ('LANG' in os.environ) and ('ja_JP' in os.environ['LANG']):
            print('vimでも使ってろ！')
        else:
            print("Why Don't you use vim???")
        return

    lib = load_lib(args)
    if lib is not None:
        lib.main(fpath, args)
    return


if __name__ == "__main__":
    supported_type = list(type_config.keys()).copy()
    supported_type.remove('text')
    parser = argparse.ArgumentParser(
            description="show the constitution of a file."
            + " support file types ... {}".format(', '.join(supported_type)),
            epilog="PyViewer has some subcommands,"
            + " 'pyviewer update' updates this command,"
            + " 'pyviewer config_list' shows the current optional configuration,"
            + " and 'pyviewer help -t TYPE' shows the detailed help of each type."
            )
    parser.add_argument('file', help='input file')
    parser.add_argument('-t', '--type', dest='type',
                        help='specify the file type. "pyviewer help -t TYPE" will show the detailed help.',
                        choices=supported_type)
    parser.add_argument('-iv', '--image_viewer', **helpmsg.iv_help)
    parser.add_argument('--encoding', **helpmsg.encoding_help)
    parser.add_argument('--ask_password', '-p', **helpmsg.pass_help)
    ex_group = parser.add_mutually_exclusive_group()
    ex_group.add_argument('-v', '--verbose', **helpmsg.verbose_help)
    ex_group.add_argument('-k', '--key', **helpmsg.key_help)
    ex_group.add_argument('-i', '--interactive', **helpmsg.interactive_help)
    ex_group.add_argument('-c', '--interactive_cui', **helpmsg.cui_help)
    if json_opts['add_args'] is not None:
        try:
            # additional arguments
            lib = import_module("pyviewerlib.{}".format(json_opts['add_args']))
        except ImportError as e:
            debug_print(e)
        else:
            lib.main(parser)
    args = parser.parse_args()

    args.debug = debug
    if not args_chk(args, 'image_viewer'):
        if json_opts['image_viewer'] is not None:
            args.image_viewer = json_opts['image_viewer']
    # args.opts = json_opts
    main(args)

# vim: set filetype=python:
